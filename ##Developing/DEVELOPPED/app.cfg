var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var GateMutex = xdc.useModule('ti.sysbios.gates.GateMutex');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;
BIOS.runtimeCreatesEnabled = false;
BIOS.customCCOpts = "--endian=little -mv7M4 --abi=eabi --float_support=fpv4spd16 -q -ms --opt_for_speed=2  --program_level_compile -o3 -g --optimize_with_debug";
BIOS.rtsGateType = BIOS.NoLocking;
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "Can0_handle";
hwi0Params.priority = 5;
Program.global.Can0_handle = Hwi.create(55, "&CAN0_Handler", hwi0Params);
Idle.idleFxns[0] = "&fxn_idle1";
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "rte_Binary_Semaphore_Ultrasonic_Data_handle";
semaphore0Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Ultrasonic_Data_handle = Semaphore.create(null, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "rte_Binary_Semaphore_Ultrasonic_Requests_handle";
semaphore1Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Ultrasonic_Requests_handle = Semaphore.create(null, semaphore1Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "Timer2A_Handle";
hwi1Params.priority = 5;
Program.global.Timer2A_Handle = Hwi.create(39, "&Front_Left_Ultrasonic_Handler", hwi1Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "Timer3A_Handle";
hwi2Params.priority = 5;
Program.global.Timer3A_Handle = Hwi.create(51, "&Front_Right_Ultrasonic_Handler", hwi2Params);
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "Timer3B_Handle";
hwi3Params.priority = 5;
Program.global.Timer3B_Handle = Hwi.create(52, "&Right_Front_Ultrasonic_Handler", hwi3Params);
var hwi4Params = new Hwi.Params();
hwi4Params.instance.name = "WTimer2B_Handle";
hwi4Params.priority = 5;
Program.global.WTimer2B_Handle = Hwi.create(115, "&Right_Back_Ultrasonic_Handler", hwi4Params);
var hwi5Params = new Hwi.Params();
hwi5Params.instance.name = "WTimer3A_Handle";
hwi5Params.priority = 5;
Program.global.WTimer3A_Handle = Hwi.create(116, "&Back_Right_Ultrasonic_Handler", hwi5Params);
var hwi6Params = new Hwi.Params();
hwi6Params.instance.name = "WTimer3B_Handle";
hwi6Params.priority = 5;
Program.global.WTimer3B_Handle = Hwi.create(117, "&Back_Left_Ultrasonic_Handler", hwi6Params);
var hwi7Params = new Hwi.Params();
hwi7Params.instance.name = "Timer1A_Handle";
hwi7Params.priority = 5;
Program.global.Timer1A_Handle = Hwi.create(37, "&Left_Back_Ultrasonic_Handler", hwi7Params);
var hwi8Params = new Hwi.Params();
hwi8Params.instance.name = "Timer1B_Handle";
hwi8Params.priority = 5;
Program.global.Timer1B_Handle = Hwi.create(38, "&Left_Front_Ultrasonic_Handler", hwi8Params);
Clock.timerId = 5;
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "rte_Mutex_Ultrasonic_Requests_handle";
semaphore2Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Mutex_Ultrasonic_Requests_handle = Semaphore.create(1, semaphore2Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "rte_Mutex_Ultrasonic_Data_handle";
semaphore3Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Mutex_Ultrasonic_Data_handle = Semaphore.create(1, semaphore3Params);
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "rte_Binary_Semaphore_Car_angle_Data_handle";
semaphore4Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Car_angle_Data_handle = Semaphore.create(null, semaphore4Params);
var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "rte_Mutex_Motor_speed_Data_handle";
semaphore5Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Mutex_Motor_speed_Data_handle = Semaphore.create(1, semaphore5Params);
var semaphore6Params = new Semaphore.Params();
semaphore6Params.instance.name = "rte_Binary_Semaphore_Motor_speed_Data_handle";
semaphore6Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Motor_speed_Data_handle = Semaphore.create(null, semaphore6Params);
var semaphore7Params = new Semaphore.Params();
semaphore7Params.instance.name = "rte_Mutex_Desired_Car_speed_Data_handle";
semaphore7Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Mutex_Desired_Car_speed_Data_handle = Semaphore.create(1, semaphore7Params);
var semaphore8Params = new Semaphore.Params();
semaphore8Params.instance.name = "rte_Binary_Semaphore_Desired_Car_speed_handle";
semaphore8Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Desired_Car_speed_handle = Semaphore.create(null, semaphore8Params);
var semaphore9Params = new Semaphore.Params();
semaphore9Params.instance.name = "rte_Binary_Semaphore_Car_temperature_Data_handle";
semaphore9Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Car_temperature_Data_handle = Semaphore.create(null, semaphore9Params);
var task1Params = new Task.Params();
task1Params.instance.name = "task1";
Program.global.task1 = Task.create("&taskFxn1", task1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "task2";
Program.global.task2 = Task.create("&taskFxn2", task2Params);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "clock0";
clock0Params.period = 2;
clock0Params.startFlag = true;
Program.global.clock0 = Clock.create("&clockHandler0", 2, clock0Params);
var task3Params = new Task.Params();
task3Params.instance.name = "task3";
Program.global.task3 = Task.create("&taskFxn3", task3Params);
var semaphore10Params = new Semaphore.Params();
semaphore10Params.instance.name = "rte_Binary_Semaphore_Desired_Car_Direction_handle";
semaphore10Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Desired_Car_Direction_handle = Semaphore.create(null, semaphore10Params);
var semaphore11Params = new Semaphore.Params();
semaphore11Params.instance.name = "rte_Binary_Semaphore_Desired_Steering_Angle_handle";
semaphore11Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Desired_Steering_Angle_handle = Semaphore.create(null, semaphore11Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "clock1";
clock1Params.period = 20;
clock1Params.startFlag = true;
Program.global.clock1 = Clock.create("&Com_ClockHandler", 20, clock1Params);
var semaphore12Params = new Semaphore.Params();
semaphore12Params.instance.name = "Com_Binary_Semaphore_Timeout_Frame0_SpeedDirection_Handle";
semaphore12Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_Binary_Semaphore_Timeout_Frame0_SpeedDirection_Handle = Semaphore.create(null, semaphore12Params);
var semaphore13Params = new Semaphore.Params();
semaphore13Params.instance.name = "Com_Binary_Semaphore_Timeout_Frame0_SteeringAngle_Handle";
semaphore13Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_Binary_Semaphore_Timeout_Frame0_SteeringAngle_Handle = Semaphore.create(null, semaphore13Params);
var semaphore14Params = new Semaphore.Params();
semaphore14Params.instance.name = "Com_Binary_Semaphore_Timeout_Frame1_UltrasonicReq_Handle";
semaphore14Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_Binary_Semaphore_Timeout_Frame1_UltrasonicReq_Handle = Semaphore.create(0, semaphore14Params);
var semaphore15Params = new Semaphore.Params();
semaphore15Params.instance.name = "Com_Binary_Semaphore_Timeout_Frame0_UltrasonicData_Handle";
semaphore15Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_Binary_Semaphore_Timeout_Frame0_UltrasonicData_Handle = Semaphore.create(null, semaphore15Params);
var semaphore16Params = new Semaphore.Params();
semaphore16Params.instance.name = "Com_ECU1_Binary_Semaphore_Timeout_Frame2_CarAngle_Handle";
semaphore16Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_ECU1_Binary_Semaphore_Timeout_Frame2_CarAngle_Handle = Semaphore.create(null, semaphore16Params);
var semaphore17Params = new Semaphore.Params();
semaphore17Params.instance.name = "Com_ECU1_Binary_Semaphore_Timeout_Frame2_Temp_Handle";
semaphore17Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_ECU1_Binary_Semaphore_Timeout_Frame2_Temp_Handle = Semaphore.create(null, semaphore17Params);
var semaphore18Params = new Semaphore.Params();
semaphore18Params.instance.name = "Com_ECU1_Binary_Semaphore_Timeout_Frame1_MotorSpeed_Handle";
semaphore18Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_ECU1_Binary_Semaphore_Timeout_Frame1_MotorSpeed_Handle = Semaphore.create(null, semaphore18Params);
var semaphore19Params = new Semaphore.Params();
semaphore19Params.instance.name = "Com_ECU1_Binary_Semaphore_Timeout_Frame1_Actual_CarSpeed_Handle";
semaphore19Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_ECU1_Binary_Semaphore_Timeout_Frame1_Actual_CarSpeed_Handle = Semaphore.create(0, semaphore19Params);
var semaphore20Params = new Semaphore.Params();
semaphore20Params.instance.name = "Com_ECU1_Binary_Semaphore_Timeout_Frame1_Actual_CarDirection_Handle";
semaphore20Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_ECU1_Binary_Semaphore_Timeout_Frame1_Actual_CarDirection_Handle = Semaphore.create(null, semaphore20Params);
var semaphore21Params = new Semaphore.Params();
semaphore21Params.instance.name = "Com_ECU1_Binary_Semaphore_Timeout_Frame1_DistanceElapsed_Handle";
semaphore21Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_ECU1_Binary_Semaphore_Timeout_Frame1_DistanceElapsed_Handle = Semaphore.create(null, semaphore21Params);
var semaphore22Params = new Semaphore.Params();
semaphore22Params.instance.name = "rte_Binary_Semaphore_Distance_elapsed_handle";
semaphore22Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Distance_elapsed_handle = Semaphore.create(null, semaphore22Params);
var semaphore23Params = new Semaphore.Params();
semaphore23Params.instance.name = "rte_Binary_Semaphore_Actual_Car_direction_handle";
semaphore23Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Actual_Car_direction_handle = Semaphore.create(null, semaphore23Params);
var semaphore24Params = new Semaphore.Params();
semaphore24Params.instance.name = "rte_Binary_Semaphore_Actual_Car_speed_handle";
semaphore24Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rte_Binary_Semaphore_Actual_Car_speed_handle = Semaphore.create(null, semaphore24Params);
var clock2Params = new Clock.Params();
clock2Params.instance.name = "clock2";
clock2Params.period = 200;
clock2Params.startFlag = true;
Program.global.clock2 = Clock.create("&Clock_Calculate_DistanceElapsed", 200, clock2Params);
var task4Params = new Task.Params();
task4Params.instance.name = "task4";
Program.global.task4 = Task.create("&taskFxn4", task4Params);
var task5Params = new Task.Params();
task5Params.instance.name = "task5";
Program.global.task5 = Task.create("&taskFxn5", task5Params);
var clock3Params = new Clock.Params();
clock3Params.instance.name = "clock3";
clock3Params.period = 30;
clock3Params.startFlag = true;
Program.global.clock3 = Clock.create("&Com_ClockHandler2", 30, clock3Params);
var semaphore25Params = new Semaphore.Params();
semaphore25Params.instance.name = "Com_Binary_Semaphore_Timeout_Frame1_Temp_Handle";
semaphore25Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Com_Binary_Semaphore_Timeout_Frame1_Temp_Handle = Semaphore.create(0, semaphore25Params);
var hwi9Params = new Hwi.Params();
hwi9Params.instance.name = "QEI0_Handler";
hwi9Params.priority = 5;
Program.global.QEI0_Handler = Hwi.create(29, "&Encoder0_Handle", hwi9Params);
var hwi10Params = new Hwi.Params();
hwi10Params.instance.name = "QEI1_Handler";
hwi10Params.priority = 5;
Program.global.QEI1_Handler = Hwi.create(54, "&Encoder1_Handle", hwi10Params);
